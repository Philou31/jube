<jube>
   <include-path>
     <path>.</path>
     <path>../extraction</path>
     <path>../platform/nemo</path> 
   </include-path>
  <!-- set benchmark name and output folder -->
  <benchmark name="code_name" outpath="output_folder">
    <comment>A comment</comment>

    <!-- load tag mode handling for the compile step -->
    <parameterset name="compile_modes" init_with="eocoe_jube.xml">
      <!-- all different run modeas are disabled by default, remove one of following line to activiate the corresponding run mode-->
      <parameter name="darshan_mode"></parameter>
      <parameter name="scatter_mode"></parameter>
      <parameter name="compact_mode"></parameter>
    </parameterset>

    <!-- compile parametrisation -->
    <parameterset name="compile_param" init_with="compile_param.xml">
      <parameter name="arc_file">Jureca</parameter>
      <parameter name="arc_file_version">0.1</parameter>
      <parameter name="distr_folder">distr</parameter>
      <parameter name="build_folder">build</parameter>
      <parameter name="src_folder">src</parameter>
      <parameter name="executable_file">abcd_$arc_file-$arc_file_version-$compile_mode</parameter>
      <parameter name="exec_archive">distr_archive</parameter>
    </parameterset>

    <!-- substitute parts of the source files -->
    <substituteset name="sub_source_files">
      <iofile in="$jube_benchmark_home/Makefile.inc" out="Makefile_${arc_file}-${arc_file_version}.inc"/>
      <sub source="CC =">CC = $cc#</sub>
      <sub source="LD =">LD = $ld#</sub>
      <sub source="SRC =">SRC = $src_folder#</sub>
      <sub source="DISTR =">DISTR = $distr_folder#</sub>
      <sub source="BUILD =">BUILD = $build_folder#</sub>
      <sub source="EXEC =">EXEC = ${executable_file}#</sub>
    </substituteset>
 
    <!-- source files needed for compile -->
    <fileset name="sources">
      <prepare>mkdir -p $build_folder</prepare>
-      <prepare>mkdir -p $distr_folder</prepare>
    </fileset>

    <!-- compilation -->
    <step name="compile" suffix="$compile_mode">
      <use>compile_modes</use> <!-- eocoe compile mode handling -->
      <use>compile_param</use> <!-- program spec compile parameter -->
      <use>sources</use> <!-- source files needed for compile -->
      <use>sub_source_files</use> <!-- substitute parts of the source files -->
      <do tag="!no_compile">
         make -f $jube_benchmark_home/Makefile ARCH=$arc_file VERSION=$arc_file_version JUBE_HOME=$jube_benchmark_home
         mkdir -p ${jube_benchmark_home}/${exec_archive}/
         cp ${distr_folder}/${executable_file} ${jube_benchmark_home}/${exec_archive}/
      </do> <!-- compilation commands -->
      <do tag="no_compile">
         cp ${jube_benchmark_home}/${exec_archive}/${executable_file} ${distr_folder}/
      </do>
    </step>
 
    <!-- 888888888888888888888888888888888888888888888888888888888888888888888888888 -->

    <!-- load tag mode handling for the execute step -->
    <parameterset name="execute_modes" init_with="eocoe_jube.xml" />

    <!-- set job specific parameter by overwritting the platform default configuration, see platform.xml -->
    <parameterset name="systemParameter" init_with="platform.xml">
        <parameter name="nodes" type="int">8</parameter>
        <parameter name="taskspernode" type="int">2</parameter>
        <parameter name="threadspertask" type="int">4</parameter>
	<!-- Strong Scaling -->
        <parameter name="nodes" type="int" tag="strong_scale">1</parameter>
        <parameter name="threadspertask" type="int" tag="strong_scale">1,2,4,8,12</parameter>
	<!-- Sequential -->
        <parameter name="nodes" type="int" tag="seq">1</parameter>
        <parameter name="taskspernode" type="int" tag="seq">1</parameter>
        <parameter name="threadspertask" type="int" tag="seq">1</parameter>
	<parameter name="queue">prod</parameter>
        <parameter name="executable">compile/${distr_folder}/${executable_file}</parameter> 
        <parameter name="args_exec">$input_files $distribution $arguments $error_analysis $percent_relaxation $solution_distributed $BLR</parameter>
        <parameter name="scorep_filter_file">${jube_benchmark_home}/filter.txt</parameter>
        <parameter name="mail">leleux@cerfacs.fr</parameter>
	<parameter name="reservation">eocoe</parameter>
        <parameter name="extended_env">
           ${module_list}
           export FORT_BUFFERED=$use_buffered_io
        </parameter>
        <parameter name="env" mode="python" separator=";">
        {"darshan": """
                ${extended_env}
                module load darshan-runtime
		export LD_PRELOAD=$$EBROOTDARSHANMINRUNTIME/lib/libdarshan.so
		export DARSHAN_LOG_PATH=$$PWD
		export DARSHAN_LOGFILE=darshan.log
                   """,
         "papi": """
                ${extended_env}
                module load Scalasca
                export SCOREP_TOTAL_MEMORY=350MB
                export SCOREP_MPI_MAX_COMMUNICATORS=5000
<!--                export SCOREP_METRIC_PAPI_PER_PROCESS=PAPI_TOT_INS,PAPI_TOT_CYC,PAPI_L3_TCA,PAPI_L3_TCM -->
                export SCOREP_METRIC_PAPI=PAPI_TOT_INS,PAPI_TOT_CYC,PAPI_L3_TCA,PAPI_L3_TCM
                   """,
         "scalasca": """
                ${extended_env}
                module load Scalasca
                unset SCAN_TRACE_FILESYS
                export SCOREP_TOTAL_MEMORY=350MB
                export SCOREP_MPI_MAX_COMMUNICATORS=5000
                export SCAN_ANALYZE_OPTS=--single-pass
                   """}.get("${mode}","""${extended_env}""")
        </parameter>
        <parameter name="notification">ALL</parameter>
        <parameter name="outlogfile">job.out</parameter>
        <parameter name="errlogfile">job.err</parameter>
        <parameter name="timelimit">12:00:00</parameter>
	<parameter name="measurement" mode="python">
        {"scalasca" : "time scalasca -analyze -t -f $scorep_filter_file",
         "papi"     : "time scalasca -analyse -f $scorep_filter_file"}.get("$mode","time")
	</parameter>
    </parameterset>
    <parameterset name="executeset" init_with="platform.xml">
    </parameterset>

    <!-- needed input datasets -->
    <fileset name="inputs">
    </fileset>

    <!-- job execution -->
    <step name="execute" suffix="$mode" depend="compile">
      <use>execute_modes</use> <!-- eocoe execute mode handling -->
      <use>executeset</use> <!-- platform configuration -->
      <use from="platform.xml">executesub</use> <!-- substitution of job script template placeholders -->
      <use from="platform.xml">jobfiles</use> <!-- job script template -->
      <use from="input_files.xml">par_input_files</use>
      <use from="parameters.xml">execute_parameters</use>
      <use>inputs</use> <!-- needed input datasets -->
      <use>systemParameter</use> <!-- platform configuration -->
      <do done_file="$done_file">$submit $submit_script</do> <!-- submit job -->
    </step>

    <!-- 888888888888888888888888888888888888888888888888888888888888888888888888888 -->

    <!-- postprocess metric extraction configuration -->
    <parameterset name="postprocessing_parameter" init_with="eocoe_jube.xml">
      <parameter name="darshan_log_file_path">execute/darshan.log</parameter> <!-- path to the binary darshan.log file gener5ated in the darshan run -->
      <parameter name="scorep_folder_path">execute/scorep_*</parameter> <!-- scorep_folder path, normal * in pathname is available -->
      <parameter name="scorep_trace_file_path">execute/scorep_*_trace/trace.cubex</parameter> <!-- path to the scorep trace file, normal * in pathname is available -->
      <parameter name="scorep_profile_file_path">execute/scorep_*_sum/profile.cubex</parameter> <!-- path to the scorep profile file (from the papi run), normal * in pathname is available -->
      <parameter name="time_information_file_path">execute/${errlogfile}</parameter> <!-- file which contain time information, normally it ist the sdterr output of the job -->
      <parameter name="time_format">cmd</parameter> <!-- can be cmd, usr, libmem -->
      <parameter name="mem_information_file_path">execute/stdout</parameter> <!-- file which contain memory information (or the jobid of the job if SLURM is used to extract the memory information -->
      <parameter name="mem_format">slurm</parameter> <!-- can be slurm, usr and libmem -->
    </parameterset>

    <!-- load postprocessing step, use attribute tag="disable" if you want to skip this step in the beginning -->
    <include from="eocoe_jube.xml" path="step[@name='postprocess']" />

    <!-- 888888888888888888888888888888888888888888888888888888888888888888888888888 -->

    <!-- load metric extraction pattern -->
    <patternset name="eocoe_metrics" init_with="eocoe_jube.xml" />

    <!-- load analyser -->
    <include from="eocoe_jube.xml" path="analyser" />

    <!-- load result table -->
    <include from="eocoe_jube.xml" path="result" />

    <!-- substitute parts of the source files -->
    <substituteset name="sub_fp">
      <iofile in="execute/job.out" out="execute/job_fp.out"/>
      <sub source="D+">E+</sub>
      <sub source="D-">E-</sub>
    </substituteset>

    <!-- analyse and result for exec times -->
    <patternset name="pattern_output">
      <pattern name="analysis" type="float">[" "]*ELAPSED TIME IN ANALYSIS DRIVER=[" "]*${jube_pat_fp}</pattern>
    </patternset>

    <analyser name="analyse_output">
      <analyse step="postprocess">
        <file use="pattern_output">execute/job_fp.out</file> <!-- file which should be scanned -->
      </analyse>
    </analyser>
    
    <result name="result_output">
      <use>analyse_output</use> <!-- use existing analyser -->
      <table name="table_output" style="pretty">
        <column title="jube_run_id">jube_wp_id</column>
        <column>mode</column>
        <column>nodes</column>
        <column>taskspernode</column>
        <column>threadspertask</column>
        <column>analysis</column>
      </table>
      <table name="table_output_csv" type="csv">
        <column>jube_wp_id</column>
        <column>mode</column>
        <column>nodes</column>
        <column>taskspernode</column>
        <column>threadspertask</column>
        <column>analysis</column>
      </table>
    </result>

  </benchmark>
</jube>
